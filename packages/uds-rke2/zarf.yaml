# TODO: renovate setup
# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/uds-cli/v0.10.4/zarf.schema.json

kind: ZarfPackageConfig
metadata:
  name: uds-rke2
  description: "UDS RKE2 cluster setup for servers and agents. WARNING: This capability requires root access for deployment."
  url: https://github.com/justinthelaw/uds-rke2
  architecture: amd64
  version: "###ZARF_PKG_TMPL_VERSION###"

constants:
  - name: RKE2_VERSION
    description: "Release of RKE2 to install"
    value: "###ZARF_PKG_TMPL_RKE2_VERSION###"

variables:
  - name: CLUSTER_NAME
    description: "Name of the cluster"
    default: "uds-prod"
    prompt: true
  - name: JOIN_TOKEN
    description: "Cluster joining token"
    prompt: true
    sensitive: true
  - name: JOIN_ADDRESS
    description: "IP address at which to join the node when an existing cluster exists at a different IP address"
    default: ""
    prompt: false
  - name: DNS_ADDRESS
    description: "DNS address at which to join the node when accessing via a public IP or a hostname"
    default: ""
    prompt: false
  - name: AGENT_FLAG
    description: "A flag that identifies whether the node is to be started up as an agent-only role"
    default: ""
    prompt: false
    pattern: "^-a$|^$"

components:
  - name: destroy-cluster
    required: false
    description: "Optionally destroy an existing UDS RKE2 installation on the host system"
    files:
      - source: scripts/rke2-destroy.sh
        target: /root/uds-rke2-artifacts/rke2-destroy.sh
        executable: true
    actions:
      onDeploy:
        after:
          - cmd: /root/uds-rke2-artifacts/rke2-destroy.sh
            description: "Remove UDS RKE2 and all related artifacts and dependencies"

  - name: prepare-host
    required: true
    description: "Prepare host system with RKE2 installation and runtime pre-requisites"
    files:
      - source: scripts/os-prep.sh
        target: /root/uds-rke2-artifacts/os-prep.sh
        executable: true
    actions:
      onDeploy:
        after:
          - cmd: /root/uds-rke2-artifacts/os-prep.sh
            description: "Prepare the necessary OS configurations for running UDS RKE2"

  - name: install-and-configure-rke2
    required: true
    description: "Install and configure RKE2 (###ZARF_PKG_TMPL_RKE2_VERSION###) on the host system"
    files:
      - source: https://github.com/rancher/rke2/releases/download/###ZARF_PKG_TMPL_RKE2_VERSION###/rke2-images-core.linux-amd64.tar.zst
        target: /root/uds-rke2-artifacts/install/rke2-images-core.linux-amd64.tar.zst
      - source: https://github.com/rancher/rke2/releases/download/###ZARF_PKG_TMPL_RKE2_VERSION###/rke2-images-canal.linux-amd64.tar.zst
        target: /root/uds-rke2-artifacts/install/rke2-images-canal.linux-amd64.tar.zst
      - source: https://github.com/rancher/rke2/releases/download/###ZARF_PKG_TMPL_RKE2_VERSION###/rke2-images.linux-amd64.tar.zst
        target: /root/uds-rke2-artifacts/install/rke2-images.linux-amd64.tar.zst
      - source: https://github.com/rancher/rke2/releases/download/###ZARF_PKG_TMPL_RKE2_VERSION###/rke2.linux-amd64.tar.gz
        target: /root/uds-rke2-artifacts/install/rke2.linux-amd64.tar.gz
      - source: https://github.com/rancher/rke2/releases/download/###ZARF_PKG_TMPL_RKE2_VERSION###/sha256sum-amd64.txt
        target: /root/uds-rke2-artifacts/install/sha256sum-amd64.txt
      - source: https://get.rke2.io
        target: /root/uds-rke2-artifacts/install/install.sh
        executable: true
      - source: scripts/rke2-destroy.sh
        target: /root/uds-rke2-artifacts/rke2-destroy.sh
        executable: true
      - source: scripts/rke2-install.sh
        target: /root/uds-rke2-artifacts/rke2-install.sh
        executable: true
      - source: scripts/rke2-config.sh
        target: /root/uds-rke2-artifacts/rke2-config.sh
        executable: true
      - source: configs/audit-policy.yaml
        target: /root/uds-rke2-artifacts/audit-policy.yaml
        executable: false
      - source: configs/default-pss.yaml
        target: /root/uds-rke2-artifacts/default-pss.yaml
        executable: false
      - source: configs/rke2-config.yaml
        target: /root/uds-rke2-artifacts/rke2-config.yaml
        executable: false
      - source: scripts/rke2-startup.sh
        target: /root/uds-rke2-artifacts/rke2-startup.sh
        executable: true
    actions:
      onDeploy:
        after:
          - cmd: |
              /root/uds-rke2-artifacts/install/install.sh
              /root/uds-rke2-artifacts/rke2-config.sh
            env:
              - "INSTALL_RKE2_ARTIFACT_PATH=/root/uds-rke2-artifacts/install"
            description: "Install and configure UDS RKE2"

  - name: join-node-args
    required: true
    description: "Sets node start script arguments for a non-bootstrapping node joining an existing cluster"
    actions:
      onDeploy:
        before:
          # only set the flags if entered at deploy-time for a join node
          - cmd: |
              extra_join_node_args=$(
                args=""

                if [ -n "${ZARF_VAR_JOIN_ADDRESS}" ]; then
                  args="${args} -s ${ZARF_VAR_JOIN_ADDRESS}"
                fi

                if [ -n "${ZARF_VAR_DNS_ADDRESS}" ]; then
                  args="${args} -T ${ZARF_VAR_DNS_ADDRESS}"
                fi

                if [ -n "${ZARF_VAR_AGENT_FLAG}" ]; then
                  args="${args} ${ZARF_VAR_AGENT_FLAG}"
                fi

                echo ${args}
              )

              echo ${extra_join_node_args}
            setVariables:
              - name: RKE2_JOIN_ARGS
            description: "Add additional UDS RKE2 arguments to startup scripts"

  - name: start-rke2-node
    required: true
    description: "Start a new RKE2 node on the host system"
    actions:
      onDeploy:
        after:
          - cmd: |
              /root/uds-rke2-artifacts/rke2-startup.sh -t ${ZARF_VAR_JOIN_TOKEN} ${ZARF_VAR_RKE2_JOIN_ARGS}
            description: "Start RKE2 node"
            maxTotalSeconds: 600
          - description: "Validate kube-apiserver is up"
            wait:
              cluster:
                kind: Pod
                name: component=kube-apiserver
                namespace: kube-system
                condition: "'{.status.conditions[2].status}'=True"
            maxTotalSeconds: 300
          - description: "Validate kube-controller-manager is up"
            wait:
              cluster:
                kind: Pod
                name: component=kube-controller-manager
                namespace: kube-system
                condition: "'{.status.conditions[2].status}'=True"
            maxTotalSeconds: 300
          - description: "Validate kube-proxy is up"
            wait:
              cluster:
                kind: Pod
                name: component=kube-proxy
                namespace: kube-system
                condition: "'{.status.conditions[2].status}'=True"
            maxTotalSeconds: 300
          - description: "Validate kube-scheduler is up"
            wait:
              cluster:
                kind: Pod
                name: component=kube-scheduler
                namespace: kube-system
                condition: "'{.status.conditions[2].status}'=True"
            maxTotalSeconds: 300
          - description: "Validate rke2-canal is up"
            wait:
              cluster:
                kind: Pod
                name: k8s-app=canal
                namespace: kube-system
                condition: "'{.status.conditions[2].status}'=True"
            maxTotalSeconds: 300
          - description: "Validate rke2-coredns is up"
            wait:
              cluster:
                kind: Pod
                name: app.kubernetes.io/name=rke2-coredns
                namespace: kube-system
                condition: "'{.status.conditions[2].status}'=True"
            maxTotalSeconds: 300
          - description: "Validate rke2-coredns-autoscaler is up"
            wait:
              cluster:
                kind: Pod
                name: app.kubernetes.io/name=rke2-coredns-autoscaler
                namespace: kube-system
                condition: "'{.status.conditions[2].status}'=True"
            maxTotalSeconds: 300
          - description: "Validate rke2-snapshot-controller is up"
            wait:
              cluster:
                kind: Pod
                name: app.kubernetes.io/name=rke2-snapshot-controller
                namespace: kube-system
                condition: "'{.status.conditions[2].status}'=True"
            maxTotalSeconds: 300
          - description: "Validate rke2-snapshot-validation-webhook is up"
            wait:
              cluster:
                kind: Pod
                name: app.kubernetes.io/name=rke2-snapshot-validation-webhook
                namespace: kube-system
                condition: "'{.status.conditions[2].status}'=True"
            maxTotalSeconds: 300
