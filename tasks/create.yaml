# TODO: renovate setup
# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/uds-cli/v0.10.4/tasks.schema.json

variables:
  - name: VERSION
    description: "Explicitly set the version, overriding the official release tag"
    # x-release-please-start-version
    default: "0.4.2"
    # x-release-please-end

  - name: CREATE_OPTIONS
    description: "Extra Zarf package creation options"
    default: "--no-progress --no-log-file --log-level debug -a amd64 --confirm"
  - name: PULL_OPTIONS
    description: "Extra Zarf package pull options"
    default: "--no-progress --no-log-file --log-level debug -a amd64"
  - name: CREATE_BUNDLE_OPTIONS
    description: "Extra UDS bundle creation options"
    default: "--no-progress --no-tea --no-log-file --log-level debug -a amd64 --confirm"

  - name: CORE_PKG_VERSION
    description: "The version of UDS Core package to deploy"
    # TODO: renovate setup
    default: "0.22.2"
  - name: CORE_PKG_FLAVOR
    description: "Flavor of the package to use (`registry1` or `upstream`)."
    default: "registry1"

tasks:
  ##########################
  # ALL PACKAGES AND BUNDLES
  ##########################

  # TODO: re-enable rook-ceph and longhorn when built
  - name: all
    description: "Builds all Zarf packages in the repository"
    actions:
      # Zarf packages
      - task: uds-rke2
      - task: uds-rke2-infrastructure
      - task: uds-rke2-exemptions-local-path
      - task: local-path
      - task: local-path-init
      - task: minio
      - task: leapfrogai-workarounds
      - task: nvidia-gpu-operator
      - task: uds-core

      # UDS bundles
      - task: local-path-core-bundle

  ###########
  # REUSEABLE
  ###########

  - name: create
    description: "Create a Zarf package for the amd64 architectures"
    inputs:
      path:
        description: "Path to the Zarf package being created"
        required: true
      outputPath:
        description: "Output path to the Zarf package being created"
        required: true
      zarfConfig:
        description: "Zarf Config of the Zarf package being created"
        required: true
      flavor:
        description: "Flavor of the Zarf package being created"
        default: ""
        required: false
    actions:
      - description: "Create the Zarf package for the amd64 architectures"
        cmd: |
          sudo ZARF_CONFIG="${{ .inputs.zarfConfig }}" uds zarf package create "${{ .inputs.path }}" \
            -o "${{ .inputs.outputPath }}" \
            --set VERSION=${VERSION} \
            --flavor "${{ .inputs.flavor }}" \
            ${CREATE_OPTIONS}

  - name: init
    description: "Create a custom Zarf Init package for the amd64 architectures"
    inputs:
      flavor:
        description: "Flavor of the Zarf package being created"
        required: true
      outputPath:
        description: "Output path to the Zarf package being created"
        required: true
    actions:
      - description: "Create the Zarf package for the amd64 architectures"
        cmd: |
          sudo ZARF_CONFIG="packages/init/zarf-config.yaml" uds zarf package create packages/init/ \
            -o "${{ .inputs.outputPath }}" \
            --flavor "${{ .inputs.flavor }}" \
            --set AGENT_IMAGE_TAG=$(uds zarf version) \
            ${CREATE_OPTIONS}

  - name: bundle
    description: "Create the UDS bundle for the amd64 architectures"
    inputs:
      path:
        description: "Path to the UDS bundle being created"
        required: true
      outputPath:
        description: "Output path to the UDS bundle being created"
        required: true
    actions:
      - description: "Create the UDS bundle for the amd64 architectures"
        cmd: |
          sudo UDS_CONFIG=${{ .inputs.path }}/uds-config.yaml uds create "${{ .inputs.path }}" \
            -o "${{ .inputs.outputPath }}" \
            ${CREATE_BUNDLE_OPTIONS}

  #########
  # UTILITY
  #########

  - name: tls-cert
    description: "Generate self-signed TLS certs for testing"
    actions:
      - cmd: openssl req -x509 -newkey rsa:4096 -keyout tls.key -out tls.cert -days 365 -nodes -config tls-cert.conf

  #########
  # BUNDLES
  #########

  - name: local-path-core-bundle
    description: "Build the Local Path Provisioner UDS RKE2 bootstrapping bundle (LATEST)"
    actions:
      - task: bundle
        with:
          path: "bundles/latest/local-path-core"
          outputPath: "build/bundles"

  - name: local-path-core-bundle-dev
    description: "Build the Local Path Provisioner UDS RKE2 bootstrapping bundle (DEV)"
    actions:
      - task: bundle
        with:
          path: "bundles/dev/local-path-core"
          outputPath: "build/bundles"

  ###################
  # STANDARD PACKAGES
  ###################

  - name: uds-rke2
    description: "Build the UDS RKE2 Zarf package"
    actions:
      - task: create
        with:
          path: packages/uds-rke2/
          outputPath: build/packages
          zarfConfig: packages/uds-rke2/zarf-config.yaml

  - name: uds-rke2-infrastructure
    description: "Build the UDS RKE2 Infrastructure Zarf package"
    actions:
      - task: create
        with:
          path: packages/uds-rke2/infrastructure
          outputPath: build/packages
          zarfConfig: packages/uds-rke2/zarf-config.yaml

  - name: uds-rke2-exemptions-local-path
    description: "Build the UDS RKE2 service Pepr policy exemptions package"
    actions:
      - task: create
        with:
          path: packages/uds-rke2/exemptions
          outputPath: build/packages/local-path
          zarfConfig: packages/uds-rke2/zarf-config.yaml
          flavor: local-path

  - name: local-path
    description: "Build the Local Path Provisioner Zarf package"
    actions:
      - task: create
        with:
          path: packages/local-path
          outputPath: build/packages/local-path
          zarfConfig: packages/local-path/zarf-config.yaml

  - name: minio
    description: "Build the MinIO package"
    actions:
      - task: create
        with:
          path: packages/minio
          outputPath: build/packages
          zarfConfig: packages/minio/zarf-config.yaml

  - name: uds-core
    description: "Pull a specific UDS Core package based on the version and flavor variables"
    actions:
      - description: "Pull the standard UDS Core package"
        cmd: |
          sudo uds zarf package pull oci://ghcr.io/defenseunicorns/packages/uds/core:${CORE_PKG_VERSION}-${CORE_PKG_FLAVOR} \
            -o "build/packages" \
            ${PULL_OPTIONS}

  ###############
  # INIT PACKAGES
  ###############

  - name: local-path-init
    description: "Build the Local Path Provisioner Zarf Init package"
    actions:
      - task: init
        with:
          flavor: local-path
          outputPath: build/packages/local-path

  ########################
  # APP-SPECIFIC PACKAGES
  ########################

  - name: leapfrogai-workarounds
    description: "Build the LeapfrogAI-specific workarounds package"
    actions:
      - task: create
        with:
          path: packages/leapfrogai
          outputPath: build/packages
          zarfConfig: packages/leapfrogai/zarf-config.yaml

  - name: nvidia-gpu-operator
    description: "Build the NVIDIA GPU Operator package"
    actions:
      - description: "Create the Zarf package for the amd64 architectures"
        cmd: |
          sudo ZARF_CONFIG="packages/nvidia-gpu-operator/zarf-config.yaml" uds zarf package create "packages/nvidia-gpu-operator" \
            --registry-override=nvcr.io=localhost:5001 --insecure \
            -o "build/packages" \
            --set VERSION=${VERSION} \
            ${CREATE_OPTIONS}
