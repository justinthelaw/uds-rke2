# TODO: renovate setup
# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/uds-cli/v0.10.4/tasks.schema.json

variables:
  - name: DISK_NAME
    description: "The name of a Ceph-formatted disk (e.g. /dev/ubuntu-vg/ceph) that is to be wiped."
    default: "dm-1"
  - name: DEPLOY_OPTIONS
    description: "Extra Zarf package or UDS bundle deployment options"
    default: "--no-progress --no-log-file --log-level warn --confirm"

tasks:
  - name: uds-rke2-bootstrap
    description: "Deploy the UDS RKE2 Zarf package, as the cluster bootstrapping node"
    inputs:
      joinToken:
        description: "Cluster joining token"
        required: true
    actions:
      - description: "Deploy RKE2 node, with optional components enabled"
        cmd: |
          sudo uds zarf package deploy build/packages/zarf-package-uds-rke2-amd64-*.tar.zst \
            --set JOIN_TOKEN=${{ .inputs.joinToken }} \
            --components destroy-cluster \
            ${DEPLOY_OPTIONS}

  - name: uds-rke2-join-node
    description: "Deploy the UDS RKE2 Zarf package, as a cluster joining node"
    inputs:
      joinToken:
        description: "Cluster joining token"
        required: true
      joinAddress:
        description: "IP address at which to join the node when an existing cluster exists at a different IP address"
        default: ""
        required: false
      dnsAddress:
        description: "DNS address at which to join the node when accessing via a public IP or a hostname"
        default: ""
        required: false
      agentFlag:
        description: "Join the cluster as an agent-only node with `-a` flag "
        default: ""
        required: false
    actions:
      - description: "Deploy RKE2 node"
        cmd: |
          sudo uds zarf package deploy build/packages/zarf-package-uds-rke2-amd64-*.tar.zst \
            --set JOIN_ADDRESS=${{ .inputs.joinAddress }} \
            --set JOIN_TOKEN=${{ .inputs.joinToken }} \
            --set DNS_ADDRESS=${{ .inputs.dnsAddress }} \
            --set AGENT_FLAG=${{ .inputs.agentFlag }} \
            ${DEPLOY_OPTIONS}

  - name: uds-rke2-infrastructure
    description: "Deploy the UDS RKE2 Infrastructure package"
    actions:
      - description: "Deploy the UDS RKE2 Infrastructure package"
        cmd: |
          sudo uds zarf package deploy build/packages/zarf-package-infrastructure-amd64-*.zst \
            ${DEPLOY_OPTIONS}

  - name: uds-rke2-exemptions-local-path
    description: "Deploy the UDS RKE2 service Pepr policy exemptions package"
    actions:
      - description: "Deploy the UDS RKE2 service Pepr policy exemptions package"
        cmd: |
          sudo uds zarf package deploy build/packages/local-path/zarf-package-exemptions-amd64-*.zst \
            ${DEPLOY_OPTIONS}

  - name: uds-rke2-exemptions-longhorn
    description: "Deploy the UDS RKE2 service Pepr policy exemptions package"
    actions:
      - description: "Deploy the UDS RKE2 service Pepr policy exemptions package"
        cmd: |
          sudo uds zarf package deploy build/packages/longhorn/zarf-package-exemptions-amd64-*.zst \
            ${DEPLOY_OPTIONS}

  - name: uds-rke2-exemptions-rook-ceph
    description: "Deploy the UDS RKE2 service Pepr policy exemptions package"
    actions:
      - description: "Deploy the UDS RKE2 service Pepr policy exemptions package"
        cmd: |
          sudo uds zarf package deploy build/packages/rook-ceph/zarf-package-exemptions-amd64-*.zst \
            ${DEPLOY_OPTIONS}

  - name: local-path-init
    description: "Deploy the custom Zarf Init Package for RKE2 with Longhorn"
    actions:
      - description: "Deploy the custom Zarf Init package"
        cmd: |
          sudo uds zarf package deploy build/packages/local-path/zarf-init-amd64-*.tar.zst \
            ${DEPLOY_OPTIONS}

  - name: longhorn-init
    description: "Deploy the custom Zarf Init Package for RKE2 with Longhorn"
    actions:
      - description: "Deploy the custom Zarf Init package"
        cmd: |
          sudo uds zarf package deploy build/packages/longhorn/zarf-init-amd64-*.tar.zst \
            --set LONGHORN_VAR="true" \
            ${DEPLOY_OPTIONS}

  - name: rook-ceph-init
    description: "Deploy the custom Zarf Init Package for RKE2 with Rook-Ceph"
    actions:
      - description: "Deploy the custom Zarf Init package"
        # File storage is disabled by default, but can be enabled as necessary via UDS overrides or manual Zarf deployment
        cmd: |
          sudo uds zarf package deploy build/packages/rook-ceph/zarf-init-amd64-*.tar.zst \
            --no-progress \
            --set ENABLE_CEPH_BLOCK_STORE="true" \
            --set ENABLE_CEPH_OBJECT_STORE="true" \
            --set ENABLE_CEPH_FILE_STORE="false" \
            --set CEPH_BLOCK_STORE_AS_DEFAULT="true" \
            --set CEPH_OBJECT_STORE_AS_DEFAULT="false" \
            --set CEPH_FILE_STORE_AS_DEFAULT="false" \
            ${DEPLOY_OPTIONS}

  - name: minio
    description: "Deploy the MinIO package"
    actions:
      - description: "Deploy the MinIO package"
        cmd: |
          sudo uds zarf package deploy build/packages/zarf-package-minio-amd64-*.zst \
            ${DEPLOY_OPTIONS}

  - name: uds-core
    description: "Deploy a specific UDS Core package based on the version and flavor variables"
    actions:
      - description: "Deploy the standard UDS Core package"
        cmd: |
          sudo uds zarf package deploy build/packages/zarf-package-core-amd64-*.tar.zst \
            ${DEPLOY_OPTIONS}

  - name: rook-ceph-destroy
    description: "Destroys an existing Rook-Ceph cluster installation and all associated data on the host node"
    actions:
      - description: "Run the Rook-Ceph destroy script"
        cmd: |
          DISK_NAME=${DISK_NAME} /root/uds-rke2-artifacts/rook-ceph/rook-ceph-destroy.sh

  - name: uds-rke2-destroy
    description: "Destroys an existing RKE2 cluster installation and all associated artifacts"
    actions:
      - description: "Run the RKE2 destroy script"
        cmd: |
          /root/uds-rke2-artifacts/rke2-destroy.sh
          rm -rf /root/uds-rke2-artifacts/
